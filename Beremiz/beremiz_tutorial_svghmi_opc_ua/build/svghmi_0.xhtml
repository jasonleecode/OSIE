<!--Made with SVGHMI. https://beremiz.org--><html xmlns="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:xhtml="http://www.w3.org/1999/xhtml"><head><style type="text/css" media="screen"/></head><body style="margin:0;overflow:hidden;user-select:none;touch-action:none;"><!-- Created with Inkscape (http://www.inkscape.org/) --><svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="none" height="100vh" width="100vw" inkscape:version="0.92.5 (2060ec1f9f, 2020-04-08)" sodipodi:docname="svghmi.svg" id="hmi0" version="1.1" viewBox="0 0 1280 720">
  
  <defs id="defs6"/>
  <sodipodi:namedview pagecolor="#ffffff" bordercolor="#666666" borderopacity="1" objecttolerance="10" gridtolerance="10" guidetolerance="10" inkscape:pageopacity="0" inkscape:pageshadow="2" inkscape:window-width="1920" inkscape:window-height="1015" id="namedview4" showgrid="false" inkscape:zoom="1.418633" inkscape:cx="625.37152" inkscape:cy="419.21141" inkscape:window-x="0" inkscape:window-y="0" inkscape:window-maximized="1" inkscape:current-layer="hmi0" showguides="false"/>
  <rect inkscape:label="HMI:Page:Home" y="-1.9937692" x="-7.9750781" height="720" width="1280" id="rect1016" style="color:#000000;opacity:1;fill:#d6d6d6;fill-opacity:1"/>
  <text xml:space="preserve" style="font-style:normal;font-weight:normal;font-size:39.52233505px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.98805833" x="552.8136" y="109.08164" id="text35" transform="scale(0.98805833,1.012086)"><tspan sodipodi:role="line" id="tspan33" x="552.8136" y="109.08164" style="stroke-width:0.98805833">Relay 0</tspan></text>
  <g id="g446" transform="matrix(0.2859027,0,0,0.2859027,709.48026,45.693658)" inkscape:label="HMI:Input@/HMI_RELAY0">
    <text xml:space="preserve" style="font-style:normal;font-weight:normal;font-size:160px;line-height:125%;font-family:sans-serif;text-align:end;letter-spacing:0px;word-spacing:0px;text-anchor:end;fill:#ff8c00;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" x="216.32812" y="218.24219" id="text432" inkscape:label="value"><tspan sodipodi:role="line" id="tspan430" x="216.32812" y="218.24219" style="text-align:end;text-anchor:end;fill:#ff8c00;stroke-width:1px">8</tspan></text>
    <path transform="scale(1,-1)" sodipodi:type="star" style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;vector-effect:none;fill:#e6e6e6;fill-opacity:1;fill-rule:nonzero;stroke:#ff6600;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" id="path436" sodipodi:sides="3" sodipodi:cx="276.74072" sodipodi:cy="-224.98808" sodipodi:r1="29.912722" sodipodi:r2="14.956361" sodipodi:arg1="0.52359878" sodipodi:arg2="1.5707963" inkscape:flatsided="true" inkscape:rounded="0" inkscape:randomized="0" d="m 302.6459,-210.03172 -51.81035,0 25.90517,-44.86908 z" inkscape:transform-center-y="7.4781812" inkscape:label="-1"/>
    <rect inkscape:label="edit" onclick="" y="95.40741" x="1.8178837" height="128" width="230.94511" id="rect438" style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:0;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;vector-effect:none;fill:#ff00ff;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate"/>
    <path inkscape:label="+1" inkscape:transform-center-y="-7.4781804" d="m 302.6459,111.4008 -51.81035,0 25.90517,-44.869079 z" inkscape:randomized="0" inkscape:rounded="0" inkscape:flatsided="true" sodipodi:arg2="1.5707963" sodipodi:arg1="0.52359878" sodipodi:r2="14.956361" sodipodi:r1="29.912722" sodipodi:cy="96.444443" sodipodi:cx="276.74072" sodipodi:sides="3" id="path442" style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;vector-effect:none;fill:#e6e6e6;fill-opacity:1;fill-rule:nonzero;stroke:#ff6600;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" sodipodi:type="star"/>
    <path inkscape:label="=0" inkscape:transform-center-y="-10.828983" d="m 306.14807,189.68763 -58.37872,0.43598 -0.43597,-58.37872 58.37871,-0.43597 z" inkscape:randomized="0" inkscape:rounded="0" inkscape:flatsided="true" sodipodi:arg2="1.5633284" sodipodi:arg1="0.77793027" sodipodi:r2="21.657967" sodipodi:r1="41.281136" sodipodi:cy="160.71626" sodipodi:cx="276.74072" sodipodi:sides="4" id="path444" style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;vector-effect:none;fill:#e6e6e6;fill-opacity:1;fill-rule:nonzero;stroke:#ff6600;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" sodipodi:type="star" inkscape:transform-center-x="1.0089177e-06"/>
  </g>
  <g id="g446-3" transform="matrix(0.2859027,0,0,0.2859027,709.48026,145.69366)" inkscape:label="HMI:Input@/HMI_RELAY1">
    <text xml:space="preserve" style="font-style:normal;font-weight:normal;font-size:160px;line-height:125%;font-family:sans-serif;text-align:end;letter-spacing:0px;word-spacing:0px;text-anchor:end;fill:#ff8c00;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" x="216.32812" y="218.24219" id="text432-6" inkscape:label="value"><tspan sodipodi:role="line" id="tspan430-7" x="216.32812" y="218.24219" style="text-align:end;text-anchor:end;fill:#ff8c00;stroke-width:1px">8</tspan></text>
    <path transform="scale(1,-1)" sodipodi:type="star" style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;vector-effect:none;fill:#e6e6e6;fill-opacity:1;fill-rule:nonzero;stroke:#ff6600;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" id="path436-5" sodipodi:sides="3" sodipodi:cx="276.74072" sodipodi:cy="-224.98808" sodipodi:r1="29.912722" sodipodi:r2="14.956361" sodipodi:arg1="0.52359878" sodipodi:arg2="1.5707963" inkscape:flatsided="true" inkscape:rounded="0" inkscape:randomized="0" d="m 302.6459,-210.03172 -51.81035,0 25.90517,-44.86908 z" inkscape:transform-center-y="7.4781812" inkscape:label="-1"/>
    <rect inkscape:label="edit" onclick="" y="95.40741" x="1.8178837" height="128" width="230.94511" id="rect438-3" style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:0;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;vector-effect:none;fill:#ff00ff;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate"/>
    <path inkscape:label="+1" inkscape:transform-center-y="-7.4781804" d="m 302.6459,111.4008 -51.81035,0 25.90517,-44.869079 z" inkscape:randomized="0" inkscape:rounded="0" inkscape:flatsided="true" sodipodi:arg2="1.5707963" sodipodi:arg1="0.52359878" sodipodi:r2="14.956361" sodipodi:r1="29.912722" sodipodi:cy="96.444443" sodipodi:cx="276.74072" sodipodi:sides="3" id="path442-5" style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;vector-effect:none;fill:#e6e6e6;fill-opacity:1;fill-rule:nonzero;stroke:#ff6600;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" sodipodi:type="star"/>
    <path inkscape:label="=0" inkscape:transform-center-y="-10.828983" d="m 306.14807,189.68763 -58.37872,0.43598 -0.43597,-58.37872 58.37871,-0.43597 z" inkscape:randomized="0" inkscape:rounded="0" inkscape:flatsided="true" sodipodi:arg2="1.5633284" sodipodi:arg1="0.77793027" sodipodi:r2="21.657967" sodipodi:r1="41.281136" sodipodi:cy="160.71626" sodipodi:cx="276.74072" sodipodi:sides="4" id="path444-6" style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;vector-effect:none;fill:#e6e6e6;fill-opacity:1;fill-rule:nonzero;stroke:#ff6600;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" sodipodi:type="star" inkscape:transform-center-x="1.0089177e-06"/>
  </g>
  <text xml:space="preserve" style="font-style:normal;font-weight:normal;font-size:40.60216904px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1.01505423" x="537.90454" y="213.56741" id="text35-2" transform="scale(1.0150542,0.98516905)"><tspan sodipodi:role="line" id="tspan33-9" x="537.90454" y="213.56741" style="stroke-width:1.01505423">Relay 1</tspan></text>
  <text xml:space="preserve" style="font-style:normal;font-weight:normal;font-size:39.54086685px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.9885217" x="552.5509" y="306.83713" id="text35-2-3" transform="scale(0.98852168,1.0116116)"><tspan sodipodi:role="line" id="tspan33-9-6" x="552.5509" y="306.83713" style="stroke-width:0.9885217">Relay 2</tspan></text>
  <text xml:space="preserve" style="font-style:normal;font-weight:normal;font-size:39.57181549px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.98929536" x="552.11279" y="406.00681" id="text35-2-7" transform="scale(0.98929534,1.0108205)"><tspan sodipodi:role="line" id="tspan33-9-5" x="552.11279" y="406.00681" style="stroke-width:0.98929536">Relay 3</tspan></text>
  <g id="g446-35" transform="matrix(0.2859027,0,0,0.2859027,709.48026,245.69366)" inkscape:label="HMI:Input@/HMI_RELAY2">
    <text xml:space="preserve" style="font-style:normal;font-weight:normal;font-size:160px;line-height:125%;font-family:sans-serif;text-align:end;letter-spacing:0px;word-spacing:0px;text-anchor:end;fill:#ff8c00;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" x="216.32812" y="218.24219" id="text432-62" inkscape:label="value"><tspan sodipodi:role="line" id="tspan430-9" x="216.32812" y="218.24219" style="text-align:end;text-anchor:end;fill:#ff8c00;stroke-width:1px">8</tspan></text>
    <path transform="scale(1,-1)" sodipodi:type="star" style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;vector-effect:none;fill:#e6e6e6;fill-opacity:1;fill-rule:nonzero;stroke:#ff6600;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" id="path436-1" sodipodi:sides="3" sodipodi:cx="276.74072" sodipodi:cy="-224.98808" sodipodi:r1="29.912722" sodipodi:r2="14.956361" sodipodi:arg1="0.52359878" sodipodi:arg2="1.5707963" inkscape:flatsided="true" inkscape:rounded="0" inkscape:randomized="0" d="m 302.6459,-210.03172 -51.81035,0 25.90517,-44.86908 z" inkscape:transform-center-y="7.4781812" inkscape:label="-1"/>
    <rect inkscape:label="edit" onclick="" y="95.40741" x="1.8178837" height="128" width="230.94511" id="rect438-2" style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:0;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;vector-effect:none;fill:#ff00ff;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate"/>
    <path inkscape:label="+1" inkscape:transform-center-y="-7.4781804" d="m 302.6459,111.4008 -51.81035,0 25.90517,-44.869079 z" inkscape:randomized="0" inkscape:rounded="0" inkscape:flatsided="true" sodipodi:arg2="1.5707963" sodipodi:arg1="0.52359878" sodipodi:r2="14.956361" sodipodi:r1="29.912722" sodipodi:cy="96.444443" sodipodi:cx="276.74072" sodipodi:sides="3" id="path442-7" style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;vector-effect:none;fill:#e6e6e6;fill-opacity:1;fill-rule:nonzero;stroke:#ff6600;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" sodipodi:type="star"/>
    <path inkscape:label="=0" inkscape:transform-center-y="-10.828983" d="m 306.14807,189.68763 -58.37872,0.43598 -0.43597,-58.37872 58.37871,-0.43597 z" inkscape:randomized="0" inkscape:rounded="0" inkscape:flatsided="true" sodipodi:arg2="1.5633284" sodipodi:arg1="0.77793027" sodipodi:r2="21.657967" sodipodi:r1="41.281136" sodipodi:cy="160.71626" sodipodi:cx="276.74072" sodipodi:sides="4" id="path444-0" style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;vector-effect:none;fill:#e6e6e6;fill-opacity:1;fill-rule:nonzero;stroke:#ff6600;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" sodipodi:type="star" inkscape:transform-center-x="1.0089177e-06"/>
  </g>
  <g id="g446-9" transform="matrix(0.2859027,0,0,0.2859027,709.48026,345.69366)" inkscape:label="HMI:Input@/HMI_RELAY3">
    <text xml:space="preserve" style="font-style:normal;font-weight:normal;font-size:160px;line-height:125%;font-family:sans-serif;text-align:end;letter-spacing:0px;word-spacing:0px;text-anchor:end;fill:#ff8c00;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" x="216.32812" y="218.24219" id="text432-3" inkscape:label="value"><tspan sodipodi:role="line" id="tspan430-6" x="216.32812" y="218.24219" style="text-align:end;text-anchor:end;fill:#ff8c00;stroke-width:1px">8</tspan></text>
    <path transform="scale(1,-1)" sodipodi:type="star" style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;vector-effect:none;fill:#e6e6e6;fill-opacity:1;fill-rule:nonzero;stroke:#ff6600;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" id="path436-0" sodipodi:sides="3" sodipodi:cx="276.74072" sodipodi:cy="-224.98808" sodipodi:r1="29.912722" sodipodi:r2="14.956361" sodipodi:arg1="0.52359878" sodipodi:arg2="1.5707963" inkscape:flatsided="true" inkscape:rounded="0" inkscape:randomized="0" d="m 302.6459,-210.03172 -51.81035,0 25.90517,-44.86908 z" inkscape:transform-center-y="7.4781812" inkscape:label="-1"/>
    <rect inkscape:label="edit" onclick="" y="95.40741" x="1.8178837" height="128" width="230.94511" id="rect438-6" style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:0;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;vector-effect:none;fill:#ff00ff;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate"/>
    <path inkscape:label="+1" inkscape:transform-center-y="-7.4781804" d="m 302.6459,111.4008 -51.81035,0 25.90517,-44.869079 z" inkscape:randomized="0" inkscape:rounded="0" inkscape:flatsided="true" sodipodi:arg2="1.5707963" sodipodi:arg1="0.52359878" sodipodi:r2="14.956361" sodipodi:r1="29.912722" sodipodi:cy="96.444443" sodipodi:cx="276.74072" sodipodi:sides="3" id="path442-2" style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;vector-effect:none;fill:#e6e6e6;fill-opacity:1;fill-rule:nonzero;stroke:#ff6600;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" sodipodi:type="star"/>
    <path inkscape:label="=0" inkscape:transform-center-y="-10.828983" d="m 306.14807,189.68763 -58.37872,0.43598 -0.43597,-58.37872 58.37871,-0.43597 z" inkscape:randomized="0" inkscape:rounded="0" inkscape:flatsided="true" sodipodi:arg2="1.5633284" sodipodi:arg1="0.77793027" sodipodi:r2="21.657967" sodipodi:r1="41.281136" sodipodi:cy="160.71626" sodipodi:cx="276.74072" sodipodi:sides="4" id="path444-61" style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;vector-effect:none;fill:#e6e6e6;fill-opacity:1;fill-rule:nonzero;stroke:#ff6600;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" sodipodi:type="star" inkscape:transform-center-x="1.0089177e-06"/>
  </g>
</svg><script><![CDATA[
//
//
// Early independent declarations 
//
//

/* hmi-tree */

var hmi_hash = [129,53,34,212,104,24,210,166];

var heartbeat_index = 5;

var current_page_var_index = 6;

var hmitree_types = [
    "NODE",
    "INT",
    "INT",
    "INT",
    "INT",
    "INT",
    "STRING"
];

var hmitree_paths = [
    "/",
    "/HMI_RELAY0",
    "/HMI_RELAY1",
    "/HMI_RELAY2",
    "/HMI_RELAY3",
    "/HEARTBEAT",
    "/CURRENT_PAGE_0"
];

var hmitree_nodes = {
    "/" : [0, ""]
};



/* default-page */


var default_page = "Home";


/* inline-svg */

let id = document.getElementById.bind(document);
var svg_root = id("hmi0");


/* i18n */

var langs = [ ["Default", "C"],];
var translations = [
]


/* local-variable-indexes */


let hmi_locals = {};
var last_remote_index = hmitree_types.length - 1;
var next_available_index = hmitree_types.length;
let cookies = new Map(document.cookie.split("; ").map(s=>s.split("=")));

const local_defaults = {
    "lang":cookies.has("lang")?cookies.get("lang"):0
};

const persistent_locals = new Set([
   "lang"
]);
var persistent_indexes = new Map();
var cache = hmitree_types.map(_ignored => undefined);
var updates = new Map();

function page_local_index(varname, pagename){
    let pagevars = hmi_locals[pagename];
    let new_index;
    if(pagevars == undefined){
        new_index = next_available_index++;
        hmi_locals[pagename] = {[varname]:new_index}
    } else {
        let result = pagevars[varname];
        if(result != undefined) {
            return result;
        }

        new_index = next_available_index++;
        pagevars[varname] = new_index;
    }
    let defaultval = local_defaults[varname];
    if(defaultval != undefined) {
        cache[new_index] = defaultval; 
        updates.set(new_index, defaultval);
        if(persistent_locals.has(varname))
            persistent_indexes.set(new_index, varname);
    }
    return new_index;
}

function hmi_local_index(varname){
    return page_local_index(varname, "HMI_LOCAL");
}


/* widget-base-class */

var pending_widget_animates = [];

class Widget {
    offset = 0;
    frequency = 10; /* FIXME arbitrary default max freq. Obtain from config ? */
    unsubscribable = false;
    pending_animate = false;

    constructor(elt_id, freq, args, indexes, minmaxes, members){
        this.element_id = elt_id;
        this.element = id(elt_id);
        this.args = args;
        this.indexes = indexes;
        this.minmaxes = minmaxes;
        Object.keys(members).forEach(prop => this[prop]=members[prop]);
        this.lastapply = indexes.map(() => undefined);
        this.inhibit = indexes.map(() => undefined);
        this.pending = indexes.map(() => undefined);
        this.bound_unhinibit = this.unhinibit.bind(this);
        this.forced_frequency = freq;
        this.clip = true;
    }

    do_init(){
        let forced = this.forced_frequency;
        if(forced !== undefined){
            /*
            once every 10 seconds : 10s
            once per minute : 1m
            once per hour : 1h
            once per day : 1d
            */
            let unit = forced.slice(-1);
            let factor = {
                "s":1,
                "m":60,
                "h":3600,
                "d":86400}[unit];

            this.frequency = factor ? 1/(factor * Number(forced.slice(0,-1)))
                                      : Number(forced);
        }

        let init = this.init;
        if(typeof(init) == "function"){
            try {
                init.call(this);
            } catch(err) {
                console.log(err);
            }
        }
    }

    unsub(){
        /* remove subsribers */
        if(!this.unsubscribable)
            for(let i = 0; i < this.indexes.length; i++) {
                /* flush updates pending because of inhibition */
                let inhibition = this.inhibit[i];
                if(inhibition != undefined){
                    clearTimeout(inhibition);
                    this.lastapply[i] = undefined;
                    this.unhinibit(i);
                }
                let index = this.indexes[i];
                if(this.relativeness[i])
                    index += this.offset;
                subscribers(index).delete(this);
            }
        this.offset = 0;
        this.relativeness = undefined;
    }

    sub(new_offset=0, relativeness, container_id){
        this.offset = new_offset;
        this.relativeness = relativeness;
        this.container_id = container_id ;
        /* add this's subsribers */
        if(!this.unsubscribable)
            for(let i = 0; i < this.indexes.length; i++) {
                let index = this.get_variable_index(i);
                if(index == undefined) continue;
                subscribers(index).add(this);
            }
        need_cache_apply.push(this); 
    }

    apply_cache() {
        if(!this.unsubscribable) for(let index in this.indexes){
            /* dispatch current cache in newly opened page widgets */
            let realindex = this.get_variable_index(index);
            if(realindex == undefined) continue;
            let cached_val = cache[realindex];
            if(cached_val != undefined)
                this._dispatch(cached_val, cached_val, index);
        }
    }

    get_variable_index(varnum) {
        let index = this.indexes[varnum];
        if(typeof(index) == "string"){
            index = page_local_index(index, this.container_id);
        } else {
            if(this.relativeness[varnum]){
                index += this.offset;
            }
        }
        return index;
    }

    overshot(new_val, max) {
    }

    undershot(new_val, min) {
    }

    clip_min_max(index, new_val) {
        let minmax = this.minmaxes[index];
        if(minmax !== undefined && typeof new_val == "number") {
            let [min,max] = minmax;
            if(new_val < min){
                this.undershot(new_val, min);
                return min;
            }
            if(new_val > max){
                this.overshot(new_val, max);
                return max;
            }
        }
        return new_val;
    }

    change_hmi_value(index, opstr) {
        let realindex = this.get_variable_index(index);
        if(realindex == undefined) return undefined;
        let old_val = cache[realindex];
        let new_val = eval_operation_string(old_val, opstr);
        if(this.clip)
            new_val = this.clip_min_max(index, new_val);
        return apply_hmi_value(realindex, new_val);
    }

    _apply_hmi_value(index, new_val) {
        let realindex = this.get_variable_index(index);
        if(realindex == undefined) return undefined;
        if(this.clip)
            new_val = this.clip_min_max(index, new_val);
        return apply_hmi_value(realindex, new_val);
    }

    unhinibit(index){
        this.inhibit[index] = undefined;
        let new_val = this.pending[index];
        this.pending[index] = undefined;
        return this.apply_hmi_value(index, new_val);
    }

    apply_hmi_value(index, new_val) {
        if(this.inhibit[index] == undefined){
            let now = Date.now();
            let min_interval = 1000/this.frequency;
            let lastapply = this.lastapply[index];
            if(lastapply == undefined || now > lastapply + min_interval){
                this.lastapply[index] = now;
                return this._apply_hmi_value(index, new_val);
            }
            else {
                let elapsed = now - lastapply;
                this.pending[index] = new_val;
                this.inhibit[index] = setTimeout(this.bound_unhinibit, min_interval - elapsed, index);
            }
        }
        else {
            this.pending[index] = new_val;
            return new_val;
        }
    }

    new_hmi_value(index, value, oldval) {
        // TODO avoid searching, store index at sub()
        for(let i = 0; i < this.indexes.length; i++) {
            let refindex = this.get_variable_index(i);
            if(refindex == undefined) continue;

            if(index == refindex) {
                this._dispatch(value, oldval, i);
                break;
            }
        }
    }
    
    _dispatch(value, oldval, varnum) {
        let dispatch = this.dispatch;
        if(dispatch != undefined){
            try {
                dispatch.call(this, value, oldval, varnum);
            } catch(err) {
                console.log(err);
            }
        }
    }

    _animate(){
        this.animate();
        this.pending_animate = false;
    }

    request_animate(){
        if(!this.pending_animate){
            pending_widget_animates.push(this);
            this.pending_animate = true;
            requestHMIAnimation();
        }

    }

    activate_activable(eltsub) {
        eltsub.inactive.style.display = "none";
        eltsub.active.style.display = "";
    }

    inactivate_activable(eltsub) {
        eltsub.active.style.display = "none";
        eltsub.inactive.style.display = "";
    }
}


//
//
// Declarations depending on preamble 
//
//

/* detachable-elements */


var detachable_elements = {
    "rect1016":[id("rect1016"), id("hmi0")],
    "text35":[id("text35"), id("hmi0")],
    "g446":[id("g446"), id("hmi0")],
    "g446-3":[id("g446-3"), id("hmi0")],
    "text35-2":[id("text35-2"), id("hmi0")],
    "text35-2-3":[id("text35-2-3"), id("hmi0")],
    "text35-2-7":[id("text35-2-7"), id("hmi0")],
    "g446-35":[id("g446-35"), id("hmi0")],
    "g446-9":[id("g446-9"), id("hmi0")]
}


/* hmi-classes */

class InputWidget extends Widget{
     on_op_click(opstr) {
         this.change_hmi_value(0, opstr);
     }
     edit_callback(new_val) {
         this.apply_hmi_value(0, new_val);
     }

     is_inhibited = false;
     alert(msg){
         this.is_inhibited = true;
         this.display = msg;
         setTimeout(() => this.stopalert(), 1000);
         this.request_animate();
     }

     stopalert(){
         this.is_inhibited = false;
         this.display = this.last_value;
         this.request_animate();
     }

     overshot(new_val, max) {
         this.alert("max");
     }

     undershot(new_val, min) {
         this.alert("min");
     }
}


/* hmi-elements */

var hmi_widgets = {
  "g446": new InputWidget ("g446",undefined,[],[1],[undefined],{
    value_elt: id("text432"),
    edit_elt: id("rect438"),
    frequency: 5,
    dispatch: function(value) {
        this.last_value = value;
        if(!this.is_inhibited){
            this.display = this.last_value;
            this.request_animate();
        }
    },
    animate: function(){
        this.value_elt.textContent = String(this.display);
    },
    init: function() {
        this.edit_elt.onclick = () => edit_value("/HMI_RELAY0", "HMI_INT", this, this.last_value);
        this.value_elt.style.pointerEvents = "none";
        id("path436").onclick = () => this.on_op_click("-1");
        id("path442").onclick = () => this.on_op_click("+1");
        id("path444").onclick = () => this.on_op_click("=0");
    },
  }),
  "g446-3": new InputWidget ("g446-3",undefined,[],[2],[undefined],{
    value_elt: id("text432-6"),
    edit_elt: id("rect438-3"),
    frequency: 5,
    dispatch: function(value) {
        this.last_value = value;
        if(!this.is_inhibited){
            this.display = this.last_value;
            this.request_animate();
        }
    },
    animate: function(){
        this.value_elt.textContent = String(this.display);
    },
    init: function() {
        this.edit_elt.onclick = () => edit_value("/HMI_RELAY1", "HMI_INT", this, this.last_value);
        this.value_elt.style.pointerEvents = "none";
        id("path436-5").onclick = () => this.on_op_click("-1");
        id("path442-5").onclick = () => this.on_op_click("+1");
        id("path444-6").onclick = () => this.on_op_click("=0");
    },
  }),
  "g446-35": new InputWidget ("g446-35",undefined,[],[3],[undefined],{
    value_elt: id("text432-62"),
    edit_elt: id("rect438-2"),
    frequency: 5,
    dispatch: function(value) {
        this.last_value = value;
        if(!this.is_inhibited){
            this.display = this.last_value;
            this.request_animate();
        }
    },
    animate: function(){
        this.value_elt.textContent = String(this.display);
    },
    init: function() {
        this.edit_elt.onclick = () => edit_value("/HMI_RELAY2", "HMI_INT", this, this.last_value);
        this.value_elt.style.pointerEvents = "none";
        id("path436-1").onclick = () => this.on_op_click("-1");
        id("path442-7").onclick = () => this.on_op_click("+1");
        id("path444-0").onclick = () => this.on_op_click("=0");
    },
  }),
  "g446-9": new InputWidget ("g446-9",undefined,[],[4],[undefined],{
    value_elt: id("text432-3"),
    edit_elt: id("rect438-6"),
    frequency: 5,
    dispatch: function(value) {
        this.last_value = value;
        if(!this.is_inhibited){
            this.display = this.last_value;
            this.request_animate();
        }
    },
    animate: function(){
        this.value_elt.textContent = String(this.display);
    },
    init: function() {
        this.edit_elt.onclick = () => edit_value("/HMI_RELAY3", "HMI_INT", this, this.last_value);
        this.value_elt.style.pointerEvents = "none";
        id("path436-0").onclick = () => this.on_op_click("-1");
        id("path442-2").onclick = () => this.on_op_click("+1");
        id("path444-61").onclick = () => this.on_op_click("=0");
    },
  })
}


/* DropDown */

function gettext(o) {
    if(typeof(o) == "string"){
        return o;
    }
    return svg_text_to_multiline(o);
};


/* jump */

var jumps_need_update = false;
var jump_history = [[default_page, undefined]];

function update_jumps() {
    page_desc[current_visible_page].jumps.map(w=>w.notify_page_change(current_visible_page,current_page_index));
    jumps_need_update = false;
};



/* keypad */


var keypads = {
}


//
//
// Order independent declaration and code 
//
//

/* page-desc */


var page_desc = {
  "Home": {
    bbox: [-7.9750781, -1.9937692, 1280, 720],
    widgets: [
        [hmi_widgets["g446"], [false]],
        [hmi_widgets["g446-3"], [false]],
        [hmi_widgets["g446-35"], [false]],
        [hmi_widgets["g446-9"], [false]]
    ],
    jumps: [
    ],
    required_detachables: {
        "rect1016": detachable_elements["rect1016"],
        "text35": detachable_elements["text35"],
        "g446": detachable_elements["g446"],
        "g446-3": detachable_elements["g446-3"],
        "text35-2": detachable_elements["text35-2"],
        "text35-2-3": detachable_elements["text35-2-3"],
        "text35-2-7": detachable_elements["text35-2-7"],
        "g446-35": detachable_elements["g446-35"],
        "g446-9": detachable_elements["g446-9"]
    }
  }
}


//
//
// Statements that needs to be at the end 
//
//
/* https://github.com/alexei/sprintf.js/blob/master/src/sprintf.js */
/* global window, exports, define */

!function() {
    'use strict'

    var re = {
        not_string: /[^s]/,
        not_bool: /[^t]/,
        not_type: /[^T]/,
        not_primitive: /[^v]/,
        number: /[diefg]/,
        numeric_arg: /[bcdiefguxX]/,
        json: /[j]/,
        not_json: /[^j]/,
        text: /^[^%]+/,
        modulo: /^%{2}/,
        placeholder: /^%(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxXD])/,
        key: /^([a-z_][a-z_\d]*)/i,
        key_access: /^\.([a-z_][a-z_\d]*)/i,
        index_access: /^\[(\d+)\]/,
        sign: /^[+-]/
    }

    function sprintf(key) {
        // arguments is not an array, but should be fine for this call
        return sprintf_format(sprintf_parse(key), arguments)
    }

    function vsprintf(fmt, argv) {
        return sprintf.apply(null, [fmt].concat(argv || []))
    }

    function sprintf_format(parse_tree, argv) {
        var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, ph, pad, pad_character, pad_length, is_positive, sign
        for (i = 0; i < tree_length; i++) {
            if (typeof parse_tree[i] === 'string') {
                output += parse_tree[i]
            }
            else if (typeof parse_tree[i] === 'object') {
                ph = parse_tree[i] // convenience purposes only
                if (ph.keys) { // keyword argument
                    arg = argv[cursor]
                    for (k = 0; k < ph.keys.length; k++) {
                        if (arg == undefined) {
                            throw new Error(sprintf('[sprintf] Cannot access property "%s" of undefined value "%s"', ph.keys[k], ph.keys[k-1]))
                        }
                        arg = arg[ph.keys[k]]
                    }
                }
                else if (ph.param_no) { // positional argument (explicit)
                    arg = argv[ph.param_no]
                }
                else { // positional argument (implicit)
                    arg = argv[cursor++]
                }

                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {
                    arg = arg()
                }

                if (re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {
                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))
                }

                if (re.number.test(ph.type)) {
                    is_positive = arg >= 0
                }

                switch (ph.type) {
                    case 'b':
                        arg = parseInt(arg, 10).toString(2)
                        break
                    case 'c':
                        arg = String.fromCharCode(parseInt(arg, 10))
                        break
                    case 'd':
                    case 'i':
                        arg = parseInt(arg, 10)
                        break
                    case 'D':
                        /*  

                            select date format with width
                            select time format with precision
                            %D  => 13:31 AM (default)
                            %1D  => 13:31 AM
                            %.1D  => 07/07/20
                            %1.1D  => 07/07/20, 13:31 AM
                            %1.2D  => 07/07/20, 13:31:55 AM
                            %2.2D  => May 5, 2022, 9:29:16 AM
                            %3.3D  => May 5, 2022 at 9:28:16 AM GMT+2
                            %4.4D  => Thursday, May 5, 2022 at 9:26:59 AM Central European Summer Time

                            see meaning of DateTimeFormat's options "datestyle" and "timestyle" in MDN 
                        */

                        let [datestyle, timestyle] = [ph.width, ph.precision].map(val => ({
                            1: "short",
                            2: "medium",
                            3: "long",
                            4: "full"
                        }[val]));

                        if(timestyle === undefined && datestyle === undefined){
                            timestyle = "short";
                        }

                        let options = {
                            dateStyle: datestyle,
                            timeStyle: timestyle,
                            hour12: false
                        }

                        /* get lang from globals */
                        let lang = get_current_lang_code();
                        arg = Date(arg).toLocaleString('en-US', options);
                        
                        /*    
                            TODO: select with padding char
                                  a: absolute time and date (default)
                                  r: relative time
                        */

                        break
                    case 'j':
                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0)
                        break
                    case 'e':
                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential()
                        break
                    case 'f':
                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg)
                        break
                    case 'g':
                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg)
                        break
                    case 'o':
                        arg = (parseInt(arg, 10) >>> 0).toString(8)
                        break
                    case 's':
                        arg = String(arg)
                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)
                        break
                    case 't':
                        arg = String(!!arg)
                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)
                        break
                    case 'T':
                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()
                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)
                        break
                    case 'u':
                        arg = parseInt(arg, 10) >>> 0
                        break
                    case 'v':
                        arg = arg.valueOf()
                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)
                        break
                    case 'x':
                        arg = (parseInt(arg, 10) >>> 0).toString(16)
                        break
                    case 'X':
                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()
                        break
                }
                if (re.json.test(ph.type)) {
                    output += arg
                }
                else {
                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {
                        sign = is_positive ? '+' : '-'
                        arg = arg.toString().replace(re.sign, '')
                    }
                    else {
                        sign = ''
                    }
                    pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' '
                    pad_length = ph.width - (sign + arg).length
                    pad = ph.width ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''
                    output += ph.align ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)
                }
            }
        }
        return output
    }

    var sprintf_cache = Object.create(null)

    function sprintf_parse(fmt) {
        if (sprintf_cache[fmt]) {
            return sprintf_cache[fmt]
        }

        var _fmt = fmt, match, parse_tree = [], arg_names = 0
        while (_fmt) {
            if ((match = re.text.exec(_fmt)) !== null) {
                parse_tree.push(match[0])
            }
            else if ((match = re.modulo.exec(_fmt)) !== null) {
                parse_tree.push('%')
            }
            else if ((match = re.placeholder.exec(_fmt)) !== null) {
                if (match[2]) {
                    arg_names |= 1
                    var field_list = [], replacement_field = match[2], field_match = []
                    if ((field_match = re.key.exec(replacement_field)) !== null) {
                        field_list.push(field_match[1])
                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {
                                field_list.push(field_match[1])
                            }
                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
                                field_list.push(field_match[1])
                            }
                            else {
                                throw new SyntaxError('[sprintf] failed to parse named argument key')
                            }
                        }
                    }
                    else {
                        throw new SyntaxError('[sprintf] failed to parse named argument key')
                    }
                    match[2] = field_list
                }
                else {
                    arg_names |= 2
                }
                if (arg_names === 3) {
                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')
                }

                parse_tree.push(
                    {
                        placeholder: match[0],
                        param_no:    match[1],
                        keys:        match[2],
                        sign:        match[3],
                        pad_char:    match[4],
                        align:       match[5],
                        width:       match[6],
                        precision:   match[7],
                        type:        match[8]
                    }
                )
            }
            else {
                throw new SyntaxError('[sprintf] unexpected placeholder')
            }
            _fmt = _fmt.substring(match[0].length)
        }
        return sprintf_cache[fmt] = parse_tree
    }

    /**
     * export to either browser or node.js
     */
    /* eslint-disable quote-props */
    if (typeof exports !== 'undefined') {
        exports['sprintf'] = sprintf
        exports['vsprintf'] = vsprintf
    }
    if (typeof window !== 'undefined') {
        window['sprintf'] = sprintf
        window['vsprintf'] = vsprintf

        if (typeof define === 'function' && define['amd']) {
            define(function() {
                return {
                    'sprintf': sprintf,
                    'vsprintf': vsprintf
                }
            })
        }
    }
    /* eslint-enable quote-props */
}(); // eslint-disable-line    
// svghmi.js

var need_cache_apply = [];

function dispatch_value(index, value) {
    let widgets = subscribers(index);

    let oldval = cache[index];
    cache[index] = value;

    if(widgets.size > 0) {
        for(let widget of widgets){
            widget.new_hmi_value(index, value, oldval);
        }
    }
};

function init_widgets() {
    Object.keys(hmi_widgets).forEach(function(id) {
        let widget = hmi_widgets[id];
        widget.do_init();
    });
};

// Open WebSocket to relative "/ws" address
var has_watchdog = window.location.hash == "#watchdog";

var ws_url = 
    window.location.href.replace(/^http(s?:\/\/[^\/]*)\/.*$/, 'ws$1/ws')
    + '?mode=' + (has_watchdog ? "watchdog" : "multiclient");

var ws = new WebSocket(ws_url);
ws.binaryType = 'arraybuffer';

const dvgetters = {
    INT: (dv,offset) => [dv.getInt16(offset, true), 2],
    BOOL: (dv,offset) => [dv.getInt8(offset, true), 1],
    NODE: (dv,offset) => [dv.getInt8(offset, true), 1],
    REAL: (dv,offset) => [dv.getFloat32(offset, true), 4],
    STRING: (dv, offset) => {
        const size = dv.getInt8(offset);
        return [
            String.fromCharCode.apply(null, new Uint8Array(
                dv.buffer, /* original buffer */
                offset + 1, /* string starts after size*/
                size /* size of string */
            )), size + 1]; /* total increment */
    }
};

// Apply updates recieved through ws.onmessage to subscribed widgets
function apply_updates() {
    updates.forEach((value, index) => {
        dispatch_value(index, value);
    });
    updates.clear();
}

// Called on requestAnimationFrame, modifies DOM
var requestAnimationFrameID = null;
function animate() {
    // Do the page swith if any one pending
    if(current_subscribed_page != current_visible_page){
        switch_visible_page(current_subscribed_page);
    }

    while(widget = need_cache_apply.pop()){
        widget.apply_cache();
    }

    if(jumps_need_update) update_jumps();

    apply_updates();

    pending_widget_animates.forEach(widget => widget._animate());
    pending_widget_animates = [];

    requestAnimationFrameID = null;
}

function requestHMIAnimation() {
    if(requestAnimationFrameID == null){
        requestAnimationFrameID = window.requestAnimationFrame(animate);
    }
}

// Message reception handler
// Hash is verified and HMI values updates resulting from binary parsing
// are stored until browser can compute next frame, DOM is left untouched
ws.onmessage = function (evt) {

    let data = evt.data;
    let dv = new DataView(data);
    let i = 0;
    try {
        for(let hash_int of hmi_hash) {
            if(hash_int != dv.getUint8(i)){
                throw new Error("Hash doesn't match");
            };
            i++;
        };

        while(i < data.byteLength){
            let index = dv.getUint32(i, true);
            i += 4;
            let iectype = hmitree_types[index];
            if(iectype != undefined){
                let dvgetter = dvgetters[iectype];
                let [value, bytesize] = dvgetter(dv,i);
                updates.set(index, value);
                i += bytesize;
            } else {
                throw new Error("Unknown index "+index);
            }
        };
        // register for rendering on next frame, since there are updates
        requestHMIAnimation();
    } catch(err) {
        // 1003 is for "Unsupported Data"
        // ws.close(1003, err.message);

        // TODO : remove debug alert ?
        alert("Error : "+err.message+"\nHMI will be reloaded.");

        // force reload ignoring cache
        location.reload(true);
    }
};

hmi_hash_u8 = new Uint8Array(hmi_hash);

function send_blob(data) {
    if(data.length > 0) {
        ws.send(new Blob([hmi_hash_u8].concat(data)));
    };
};

const typedarray_types = {
    INT: (number) => new Int16Array([number]),
    BOOL: (truth) => new Int16Array([truth]),
    NODE: (truth) => new Int16Array([truth]),
    REAL: (number) => new Float32Array([number]),
    STRING: (str) => {
        // beremiz default string max size is 128
        str = str.slice(0,128);
        binary = new Uint8Array(str.length + 1);
        binary[0] = str.length;
        for(let i = 0; i < str.length; i++){
            binary[i+1] = str.charCodeAt(i);
        }
        return binary;
    }
    /* TODO */
};

function send_reset() {
    send_blob(new Uint8Array([1])); /* reset = 1 */
};

var subscriptions = [];

function subscribers(index) {
    let entry = subscriptions[index];
    let res;
    if(entry == undefined){
        res = new Set();
        subscriptions[index] = [res,0];
    }else{
        [res, _ign] = entry;
    }
    return res
}

function get_subscription_period(index) {
    let entry = subscriptions[index];
    if(entry == undefined)
        return 0;
    let [_ign, period] = entry;
    return period;
}

function set_subscription_period(index, period) {
    let entry = subscriptions[index];
    if(entry == undefined){
        subscriptions[index] = [new Set(), period];
    } else {
        entry[1] = period;
    }
}

if(has_watchdog){
    // artificially subscribe the watchdog widget to "/heartbeat" hmi variable
    // Since dispatch directly calls change_hmi_value,
    // PLC will periodically send variable at given frequency
    subscribers(heartbeat_index).add({
        /* type: "Watchdog", */
        frequency: 1,
        indexes: [heartbeat_index],
        new_hmi_value: function(index, value, oldval) {
            apply_hmi_value(heartbeat_index, value+1);
        }
    });
}

// subscribe to per instance current page hmi variable
// PLC must prefix page name with "!" for page switch to happen
subscribers(current_page_var_index).add({
    frequency: 1,
    indexes: [current_page_var_index],
    new_hmi_value: function(index, value, oldval) {
        if(value.startsWith("!"))
            switch_page(value.slice(1));
    }
});

function svg_text_to_multiline(elt) {
    return(Array.prototype.map.call(elt.children, x=>x.textContent).join("\n")); 
}

function multiline_to_svg_text(elt, str) {
    str.split('\n').map((line,i) => {elt.children[i].textContent = line;});
}

function switch_langnum(langnum) {
    langnum = Math.max(0, Math.min(langs.length - 1, langnum));

    for (let translation of translations) {
        let [objs, msgs] = translation;
        let msg = msgs[langnum];
        for (let obj of objs) {
            multiline_to_svg_text(obj, msg);
            obj.setAttribute("lang",langnum);
        }
    }
    return langnum;
}

// backup original texts
for (let translation of translations) {
    let [objs, msgs] = translation;
    msgs.unshift(svg_text_to_multiline(objs[0])); 
}

var lang_local_index = hmi_local_index("lang");
var langcode_local_index = hmi_local_index("lang_code");
var langname_local_index = hmi_local_index("lang_name");
subscribers(lang_local_index).add({
    indexes: [lang_local_index],
    new_hmi_value: function(index, value, oldval) {
        let current_lang =  switch_langnum(value);
        let [langname,langcode] = langs[current_lang];
        apply_hmi_value(langcode_local_index, langcode);
        apply_hmi_value(langname_local_index, langname);
        switch_page();
    }
});

// returns en_US, fr_FR or en_UK depending on selected language
function get_current_lang_code(){
    return cache[langcode_local_index];
}

function setup_lang(){
    let current_lang = cache[lang_local_index];
    let new_lang = switch_langnum(current_lang);
    if(current_lang != new_lang){
        apply_hmi_value(lang_local_index, new_lang);
    }
}

setup_lang();

function update_subscriptions() {
    let delta = [];
    for(let index in subscriptions){
        let widgets = subscribers(index);

        // periods are in ms
        let previous_period = get_subscription_period(index);

        // subscribing with a zero period is unsubscribing
        let new_period = 0;
        if(widgets.size > 0) {
            let maxfreq = 0;
            for(let widget of widgets){
                let wf = widget.frequency;
                if(wf != undefined && maxfreq < wf)
                    maxfreq = wf;
            }

            if(maxfreq != 0)
                new_period = 1000/maxfreq;
        }

        if(previous_period != new_period) {
            set_subscription_period(index, new_period);
            if(index <= last_remote_index){
                delta.push(
                    new Uint8Array([2]), /* subscribe = 2 */
                    new Uint32Array([index]),
                    new Uint16Array([new_period]));
            }
        }
    }
    send_blob(delta);
};

function send_hmi_value(index, value) {
    if(index > last_remote_index){
        updates.set(index, value);

        if(persistent_indexes.has(index)){
            let varname = persistent_indexes.get(index);
            document.cookie = varname+"="+value+"; max-age=3153600000";
        }

        requestHMIAnimation();
        return;
    }

    let iectype = hmitree_types[index];
    let tobinary = typedarray_types[iectype];
    send_blob([
        new Uint8Array([0]),  /* setval = 0 */
        new Uint32Array([index]),
        tobinary(value)]);

    // DON'T DO THAT unless read_iterator in svghmi.c modifies wbuf as well, not only rbuf
    // cache[index] = value;
};

function apply_hmi_value(index, new_val) {
    // Similarly to previous comment, taking decision to update based 
    // on cache content is bad and can lead to inconsistency
    /*let old_val = cache[index];*/
    if(new_val != undefined /*&& old_val != new_val*/)
        send_hmi_value(index, new_val);
    return new_val;
}

const quotes = {"'":null, '"':null};

function eval_operation_string(old_val, opstr) {
    let op = opstr[0];
    let given_val;
    if(opstr.length < 2) 
        return undefined;
    if(opstr[1] in quotes){
        if(opstr.length < 3) 
            return undefined;
        if(opstr[opstr.length-1] == opstr[1]){
            given_val = opstr.slice(2,opstr.length-1);
        }
    } else {
        given_val = Number(opstr.slice(1));
    }
    let new_val;
    switch(op){
      case "=":
        new_val = given_val;
        break;
      case "+":
        new_val = old_val + given_val;
        break;
      case "-":
        new_val = old_val - given_val;
        break;
      case "*":
        new_val = old_val * given_val;
        break;
      case "/":
        new_val = old_val / given_val;
        break;
    }
    return new_val;
}

var current_visible_page;
var current_subscribed_page;
var current_page_index;
var page_node_local_index = hmi_local_index("page_node");

function toggleFullscreen() {
  let elem = document.documentElement;

  if (!document.fullscreenElement) {
    elem.requestFullscreen().catch(err => {
      console.log("Error attempting to enable full-screen mode: "+err.message+" ("+err.name+")");
    });
  } else {
    document.exitFullscreen();
  }
}

function prepare_svg() {
    // prevents context menu from appearing on right click and long touch
    document.body.addEventListener('contextmenu', e => {
        toggleFullscreen();
        e.preventDefault();
    });

    for(let eltid in detachable_elements){
        let [element,parent] = detachable_elements[eltid];
        parent.removeChild(element);
    }
};

function switch_page(page_name, page_index) {
    if(current_subscribed_page != current_visible_page){
        /* page switch already going */
        /* TODO LOG ERROR */
        return false;
    }

    if(page_name == undefined)
        page_name = current_subscribed_page;
    else if(page_index == undefined){
        [page_name, page_index] = page_name.split('@')
    }

    let old_desc = page_desc[current_subscribed_page];
    let new_desc = page_desc[page_name];

    if(new_desc == undefined){
        /* TODO LOG ERROR */
        return false;
    }

    if(page_index == undefined)
        page_index = new_desc.page_index;
    else if(typeof(page_index) == "string") {
        let hmitree_node = hmitree_nodes[page_index];
        if(hmitree_node !== undefined){
            let [int_index, hmiclass] = hmitree_node;
            if(hmiclass == new_desc.page_class)
                page_index = int_index;
            else
                page_index = new_desc.page_index;
        } else {
            page_index = new_desc.page_index;
        }
    }

    if(old_desc){
        old_desc.widgets.map(([widget,relativeness])=>widget.unsub());
    }
    const new_offset = page_index == undefined ? 0 : page_index - new_desc.page_index;

    const container_id = page_name + (page_index != undefined ? page_index : "");

    new_desc.widgets.map(([widget,relativeness])=>widget.sub(new_offset,relativeness,container_id));

    update_subscriptions();

    current_subscribed_page = page_name;
    current_page_index = page_index;
    let page_node;
    if(page_index != undefined){
        page_node = hmitree_paths[page_index];
    }else{
        page_node = "";
    }
    apply_hmi_value(page_node_local_index, page_node);

    jumps_need_update = true;

    requestHMIAnimation();
    jump_history.push([page_name, page_index]);
    if(jump_history.length > 42)
        jump_history.shift();

    apply_hmi_value(current_page_var_index, page_index == undefined
        ? page_name
        : page_name + "@" + hmitree_paths[page_index]);

    return true;
};

function switch_visible_page(page_name) {

    let old_desc = page_desc[current_visible_page];
    let new_desc = page_desc[page_name];

    if(old_desc){
        for(let eltid in old_desc.required_detachables){
            if(!(eltid in new_desc.required_detachables)){
                let [element, parent] = old_desc.required_detachables[eltid];
                parent.removeChild(element);
            }
        }
        for(let eltid in new_desc.required_detachables){
            if(!(eltid in old_desc.required_detachables)){
                let [element, parent] = new_desc.required_detachables[eltid];
                parent.appendChild(element);
            }
        }
    }else{
        for(let eltid in new_desc.required_detachables){
            let [element, parent] = new_desc.required_detachables[eltid];
            parent.appendChild(element);
        }
    }

    svg_root.setAttribute('viewBox',new_desc.bbox.join(" "));
    current_visible_page = page_name;
};

// Once connection established
ws.onopen = function (evt) {
    init_widgets();
    send_reset();
    // show main page
    prepare_svg();
    switch_page(default_page);
};

ws.onclose = function (evt) {
    // TODO : add visible notification while waiting for reload
    console.log("Connection closed. code:"+evt.code+" reason:"+evt.reason+" wasClean:"+evt.wasClean+" Reload in 10s.");
    // TODO : re-enable auto reload when not in debug
    //window.setTimeout(() => location.reload(true), 10000);
    alert("Connection closed. code:"+evt.code+" reason:"+evt.reason+" wasClean:"+evt.wasClean+".");

};

const xmlns = "http://www.w3.org/2000/svg";
var edit_callback;
const localtypes = {"PAGE_LOCAL":null, "HMI_LOCAL":null}
function edit_value(path, valuetype, callback, initial) {
    if(valuetype in localtypes){
        valuetype = (typeof initial) == "number" ? "HMI_REAL" : "HMI_STRING";
    }
    let [keypadid, xcoord, ycoord] = keypads[valuetype];
    edit_callback = callback;
    let widget = hmi_widgets[keypadid];
    widget.start_edit(path, valuetype, callback, initial);
};

var current_modal; /* TODO stack ?*/

function show_modal() {
    let [element, parent] = detachable_elements[this.element.id];

    tmpgrp = document.createElementNS(xmlns,"g");
    tmpgrpattr = document.createAttribute("transform");
    let [xcoord,ycoord] = this.coordinates;
    let [xdest,ydest] = page_desc[current_visible_page].bbox;
    tmpgrpattr.value = "translate("+String(xdest-xcoord)+","+String(ydest-ycoord)+")";

    tmpgrp.setAttributeNode(tmpgrpattr);

    tmpgrp.appendChild(element);
    parent.appendChild(tmpgrp);

    current_modal = [this.element.id, tmpgrp];
};

function end_modal() {
    let [eltid, tmpgrp] = current_modal;
    let [element, parent] = detachable_elements[this.element.id];

    parent.removeChild(tmpgrp);

    current_modal = undefined;
};

]]></script></body></html>